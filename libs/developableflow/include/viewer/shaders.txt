//OpenGL shaders

static const std::string vertex_shader = R"(
#version 330 core
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;
in vec3 position;
in vec3 normal;
in vec3 amb;
in vec3 spec;
in vec3 dif;
in float linetransparency;
out vec3 position_eye;
out vec3 normal_eye;
out vec3 amb_i;
out vec3 spec_i;
out vec3 dif_i;
out float linetransparency_i;
void main()
{
position_eye = vec3(view * model * vec4(position, 1.));
normal_eye = vec3(view * model * vec4(normal, 0.));
normal_eye = normalize(normal_eye);

gl_Position = proj * view * model * vec4(position, 1.);

amb_i = amb;
spec_i = spec;
dif_i = dif;
linetransparency_i = linetransparency;
}
)";

static const std::string fragment_shader_fill = R"(
#version 330 core
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;
in vec3 position_eye;
in vec3 normal_eye;
in vec3 amb_i;
in vec3 spec_i;
in vec3 dif_i;
uniform vec3 light_position;
uniform float shininess;
uniform float lighting_factor;
uniform int cel_shading;
const float num_shades = 6;
out vec4 color;
void main()
{
vec3 light_position_eye = vec3(view * vec4(light_position, 1.));
vec3 vector_to_light_eye = light_position_eye - position_eye;
vec3 direction_to_light_eye = normalize(vector_to_light_eye);
float dot_prod = dot(direction_to_light_eye, normal_eye);
float clamped_dot_prod = max (dot_prod, 0.0);
vec3 I_dif = dif_i * clamped_dot_prod; //diffuse

vec3 reflection_eye = reflect(-direction_to_light_eye, normal_eye);
vec3 surface_to_viewer_eye = normalize(-position_eye);
float dot_prod_specular = dot(reflection_eye, surface_to_viewer_eye);
dot_prod_specular = float(abs(dot_prod)==dot_prod) * max(dot_prod_specular, 0.);
float specular_factor = pow(dot_prod_specular, shininess);
vec3 I_spec = spec_i * specular_factor; //specular

color = vec4(lighting_factor*(I_dif+I_spec) + amb_i + (1.-lighting_factor)*dif_i, 1.);

if(cel_shading==1)
color = ceil(color*num_shades) / num_shades;
}
)";

static const std::string fragment_shader_texture = R"(
#version 330 core
in vec3 position_eye;
in vec3 normal_eye;
uniform vec3 light_position;
uniform float shininess;
uniform float lighting_factor;
out vec4 color;
void main()
{
color = vec4(0., 0., 0., 1.);
}
)";

static const std::string fragment_shader_lines = R"(
#version 330 core
in float linetransparency_i;
uniform vec3 wirecolor;
out vec4 color;
void main()
{
color = vec4(wirecolor, linetransparency_i);
}
)";

static const std::string points_vertex_shader = R"(
#version 330 core
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;
in vec3 point_position;
in int isImportant;
in int isSelected;
uniform float pointsize;
uniform float importantpointsize;
uniform float selectedpointsize;
uniform vec3 pointcolor;
uniform vec3 importantcolor;
uniform vec3 selectedcolor;
out vec3 insidecolor;
void main()
{
gl_Position = proj * view * model * vec4(point_position, 1.);
gl_Position.z -= 0.02; //modify z value a bit to avoid collisions
if(isSelected==1) {
insidecolor = selectedcolor;
gl_PointSize = selectedpointsize;
} else if(isImportant==1) {
insidecolor = importantcolor;
gl_PointSize = importantpointsize;
} else {
insidecolor = pointcolor;
gl_PointSize = pointsize;
}
}
)";

static const std::string points_fragment_shader = R"(
#version 330 core
uniform vec3 outlinecolor;
in vec3 insidecolor;
out vec4 color;
float pointrad_lo = 0.1;
float pointrad_hi = 0.15;
float outlinerad_lo = 0.2;
float outlinerad_hi = 0.25;
void main()
{
vec2 pos = vec2(0.5, 0.5) - gl_PointCoord.xy;
float distsq = dot(pos, pos);
color = mix(mix(vec4(insidecolor, 1.0), vec4(outlinecolor, 1.0), smoothstep(pointrad_lo, pointrad_hi, distsq)), vec4(outlinecolor, 0.), smoothstep(outlinerad_lo, outlinerad_hi, distsq));
}
)";

static const std::string plot_vertex_shader = R"(
#version 330 core
in vec2 position;
void main()
{
gl_Position = vec4(position.x, position.y, 0., 1.);
}
)";

static const std::string plot_fragment_shader = R"(
#version 330 core
uniform vec3 elementcolor;
out vec4 color;
void main()
{
color = vec4(elementcolor, 1.);
}
)";
